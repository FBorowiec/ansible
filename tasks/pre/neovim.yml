---
- name: Install Neovim dependencies (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - python3-neovim
      - python3-venv
      - fzf
      - ripgrep
      - fd-find
      - chafa
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: Install Neovim dependencies (Arch Linux)
  community.general.pacman:
    name:
      - python-pynvim
      - python-virtualenv
      - fzf
      - ripgrep
      - fd
      - chafa
    state: present
  when: ansible_os_family == "Archlinux"

- name: Check if Neovim is already installed
  ansible.builtin.command: nvim --version
  register: nvim_current
  changed_when: false
  failed_when: false

- name: Get latest Neovim release info
  ansible.builtin.uri:
    url: https://api.github.com/repos/neovim/neovim/releases/latest
    method: GET
    return_content: true
  register: nvim_release
  when: nvim_current.rc != 0

- name: Install Neovim from pre-built binary
  when: nvim_current.rc != 0
  block:
    - name: Set Neovim download URL
      ansible.builtin.set_fact:
        nvim_version: "{{ nvim_release.json.tag_name }}"
        nvim_url: >
          https://github.com/neovim/neovim/releases/download/
          {{ nvim_release.json.tag_name }}/nvim-linux-x86_64.tar.gz

    - name: Download Neovim pre-built binary
      ansible.builtin.get_url:
        url: "{{ nvim_url }}"
        dest: "/tmp/nvim-linux64.tar.gz"
        mode: "0644"
        timeout: 300

    - name: Extract Neovim binary
      ansible.builtin.unarchive:
        src: "/tmp/nvim-linux64.tar.gz"
        dest: "/opt"
        remote_src: true
        creates: "/opt/nvim-linux64/bin/nvim"
      become: true

    - name: Create Neovim symlinks
      ansible.builtin.file:
        src: "/opt/nvim-linux64/bin/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        state: link
        force: true
      become: true
      loop:
        - nvim

    - name: Clean up downloaded archive
      ansible.builtin.file:
        path: "/tmp/nvim-linux64.tar.gz"
        state: absent
